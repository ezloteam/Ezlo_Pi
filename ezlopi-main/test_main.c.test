/**
 * @file    main.c
 * @brief   perform some function on data
 * @author  John Doe
 * @version 0.1
 * @date    1st January 2024
 * @note    timer calls the function ping after interval time. xTimerCreate()
 *          takes interval in TICKs so pdMS_TO_TICKS() converts ms interval to
 *          appropriate TICKS. pdTRUE will set timer to call periodically and
 *          if Set pdFALSE, function is called once only
 */
/* ===========================================================================
** Copyright (C) 2024 Ezlo Innovation Inc
**
** Under EZLO AVAILABLE SOURCE LICENSE (EASL) AGREEMENT
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**
** 1. Redistributions of source code must retain the above copyright notice,
**    this list of conditions and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. Neither the name of the copyright holder nor the names of its
**    contributors may be used to endorse or promote products derived from
**    this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
** POSSIBILITY OF SUCH DAMAGE.
** ===========================================================================
** Module Brief
**     Brief description and any associated notes relevant to this module.
** ===========================================================================
*/

/*******************************************************************************
 *                          Include Files
 *******************************************************************************/
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "esp_log.h"
#include "freertos/timers.h"
#include "esp_random.h"

/*******************************************************************************
 *                          Extern Data Declarations
 *******************************************************************************/

/*******************************************************************************
 *                          Extern Function Declarations
 *******************************************************************************/

/*******************************************************************************
 *                          Type & Macro Definitions
 *******************************************************************************/
#define TAG "TIME"

/*******************************************************************************
 *                          Static Function Prototypes
 *******************************************************************************/
static void __test(void *pv);

/*******************************************************************************
 *                          Static Data Definitions
 *******************************************************************************/
TimerHandle_t tmr;
int id = 1;
int interval = 5000;
uint32_t last_ping = 0;

/*******************************************************************************
 *                          Extern Data Definitions
 *******************************************************************************/

/*******************************************************************************
 *                          Extern Function Definitions
 *******************************************************************************/

/**
 * @brief Global/extern function template example
 * Convention : Use capital letter for initial word on extern function
 * @param arg
 */
void ping(TimerHandle_t xTimer)
{
    printf("\r\n\r\nping %d\r\n", xTaskGetTickCount() - last_ping);
    printf("tring tring!!!\r\n\r\n\r\n");
    last_ping = xTaskGetTickCount();
}

void app_main()
{
    printf("Timer Test.\n");

    tmr = xTimerCreate("MyTimer", pdMS_TO_TICKS(interval), pdTRUE, (void *)id, &ping);
    // if (xTimerStart(tmr, 10) != pdPASS) {
    //     printf("Timer start error\r\n");
    // }

    xTaskCreate(__test, "test", 2048, NULL, 4, NULL);
}

/*******************************************************************************
 *                          Static Function Definitions
 *******************************************************************************/
static void __test(void *pv)
{
    while (1)
    {
        xTimerReset(tmr, 0);
        int ret = xTimerStart(tmr, 0);
        printf("timer-start: ret = %d\r\n", ret);

        uint32_t random = esp_random() % 10;
        printf("random value: %d\r\n", random);
        vTaskDelay(1000 * random / portTICK_RATE_MS);


        ret = xTimerStop(tmr, 0);
        printf("timer-stop: ret = %d\r\n", ret);

        vTaskDelay(3000);
    }
}

/*******************************************************************************
 *                          End of File
 *******************************************************************************/
